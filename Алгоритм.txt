В результате:
 - сначала биграммы
 - затем триграммы
- словарь <ключ, <значение, число>>. В нем хранятся все биграммы, а затем триграммы
- сохраняются самые частотные н-граммы
- если частотность одинакова, сравниваются лексикографические значения с помощью  string.CompareOrdinal
- результат возвращается

+ пробежать по списку входящих предложений
+ попробовать создать 2 словаря: для биграмм и триграмм
+ пробежаться по каждому предложению и заполнить 2 словаря
- выбрать наиболее частотные пары
- заполнить итоговый словарь частотными парами: сначала биграммы, затем триграммы

